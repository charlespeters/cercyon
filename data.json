{
  "status": "ok",
  "feed": {
    "title": "CSS-Tricks",
    "link": "https://css-tricks.com/",
    "author": "",
    "description": "Tips, Tricks, and Techniques on using Cascading Style Sheets.",
    "image": "https://cdn.css-tricks.com/wp-content/uploads/2014/03/css-tricks-star.png"
  },
  "items": [
      {
          "title": "Design Better Data Tables",
          "link": "https://medium.com/mission-log/design-better-data-tables-430a30a00d8c",
          "guid": "https://css-tricks.com/?p=244257",
          "pubDate": "Sat, 06 Aug 2016 13:35:06 +0000",
          "categories": [
              "Link",
              "rwd",
              "tables"
          ],
          "author": "Chris Coyier",
          "thumbnail": "",
          "description": "<p>Matthew Ström on how data tables can be better through things like alignment, rules, labels, backgrounds, and the type of numerals used:</p>\n<p>Oldstyle figures look nice in sentences, where they better match the size and spacing of lower-case letters; lining figures are more uniform, and reinforce the grid-like structure of the table.</p>\n<p><a href=\"https://medium.com/mission-log/design-better-data-tables-430a30a00d8c\" title=\"Direct link to featured article\">Direct Link to Article</a> — <a href=\"https://css-tricks.com/design-better-data-tables/\">Permalink</a>…</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/design-better-data-tables/\">Design Better Data Tables</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>",
          "content": "<p>Matthew Ström on how data tables can be better through things like alignment, rules, labels, backgrounds, and the type of numerals used:</p>\n<blockquote><p>Oldstyle figures look nice in sentences, where they better match the size and spacing of lower-case letters; lining figures are more uniform, and reinforce the grid-like structure of the table.</p></blockquote>\n<p><a href=\"https://medium.com/mission-log/design-better-data-tables-430a30a00d8c\" title=\"Direct link to featured article\">Direct Link to Article</a> — <a href=\"https://css-tricks.com/design-better-data-tables/\">Permalink</a></p><hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/design-better-data-tables/\">Design Better Data Tables</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>"
      },
      {
          "title": "The Atomics",
          "link": "https://css-tricks.com/the-atomics/",
          "guid": "https://css-tricks.com/?p=244254",
          "pubDate": "Sat, 06 Aug 2016 13:29:06 +0000",
          "categories": [
              "Article",
              "atomic"
          ],
          "author": "Chris Coyier",
          "thumbnail": "",
          "description": "<ul><li><a href=\"https://atomic.io/\">\"Atomic\"</a> is a browser-based timeline animation tool.</li>\n<li><a href=\"http://bradfrost.com/blog/post/atomic-web-design/\">\"Atomic Design\"</a> is a design methodology in which you design very small parts and combine them in larger and larger pieces to build a whole.</li>\n<li><a href=\"http://acss.io/\">\"Atomic CSS\"</a> is a system in which you apply styles directly through designated HTML classes.</li>\n<li><a href=\"http://www.projectatomic.io/download/\">\"Project Atomic\"</a> is something for running containerized applications, like Docker? I dunno it's DevOps-y and above my head.</li>\n<li><a href=\"http://atomicwebbrowser.com/\">\"Atomic Web Browser\"</a> is an old (looks abandoned) iOS web browser.</li>\n</ul><p>None of them have …</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-atomics/\">The Atomics</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>",
          "content": "<ul><li><a href=\"https://atomic.io/\">\"Atomic\"</a> is a browser-based timeline animation tool.</li>\n<li><a href=\"http://bradfrost.com/blog/post/atomic-web-design/\">\"Atomic Design\"</a> is a design methodology in which you design very small parts and combine them in larger and larger pieces to build a whole.</li>\n<li><a href=\"http://acss.io/\">\"Atomic CSS\"</a> is a system in which you apply styles directly through designated HTML classes.</li>\n<li><a href=\"http://www.projectatomic.io/download/\">\"Project Atomic\"</a> is something for running containerized applications, like Docker? I dunno it's DevOps-y and above my head.</li>\n<li><a href=\"http://atomicwebbrowser.com/\">\"Atomic Web Browser\"</a> is an old (looks abandoned) iOS web browser.</li>\n</ul><p>None of them have anything to do with each other, at least conceptually.</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-atomics/\">The Atomics</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>"
      },
      {
          "title": "Extensible Web Components",
          "link": "https://adactio.com/journal/11052",
          "guid": "https://css-tricks.com/?p=244223",
          "pubDate": "Fri, 05 Aug 2016 13:13:10 +0000",
          "categories": [
              "Link",
              "web components"
          ],
          "author": "Robin Rendle",
          "thumbnail": "",
          "description": "<p>Some interesting thoughts from Jeremy Keith about his concerns with Web Components:</p>\n<p>Compare Service Workers to web components.</p>\n<p>First of all, ask the question “who benefits from this technology?” In the case of Service Workers, it’s the end users. They get faster websites that handle network failure better. In the case of web components, there are no direct end-user benefits. Web components exist to make developers lives easier. That’s absolutely fine, but any developer convenience gained by the use of …</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/extensible-web-components/\">Extensible Web Components</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>",
          "content": "<p>Some interesting thoughts from Jeremy Keith about his concerns with Web Components:</p>\n<blockquote><p>Compare Service Workers to web components.</p>\n<p>First of all, ask the question “who benefits from this technology?” In the case of Service Workers, it’s the end users. They get faster websites that handle network failure better. In the case of web components, there are no direct end-user benefits. Web components exist to make developers lives easier. That’s absolutely fine, but any developer convenience gained by the use of web components can’t come at the expense of the user—that price is too high.</p>\n</blockquote>\n<p><a href=\"https://adactio.com/journal/11052\" title=\"Direct link to featured article\">Direct Link to Article</a> — <a href=\"https://css-tricks.com/extensible-web-components/\">Permalink</a></p><hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/extensible-web-components/\">Extensible Web Components</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>"
      },
      {
          "title": "Organizing Your Grunt Tasks",
          "link": "https://css-tricks.com/organizing-grunt-tasks/",
          "guid": "https://css-tricks.com/?p=244074",
          "pubDate": "Thu, 04 Aug 2016 12:24:25 +0000",
          "categories": [
              "Article",
              "build tool",
              "grunt"
          ],
          "author": "Jason Witt",
          "thumbnail": "",
          "description": "<p>The idea of breaking up your code into smaller bite sized chunks creates an environment that is easy to work in and maintain. That's often thought of as <em>module</em> design, and is a standard for web development these days. I'm going to show you a way you can use module design to better organize your Grunt tasks.</p>\n\n<p>I'm going to assume that you already know the basics of using Grunt. If you don't, here's an article by Chris to get …</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/organizing-grunt-tasks/\">Organizing Your Grunt Tasks</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>",
          "content": "<p>The idea of breaking up your code into smaller bite sized chunks creates an environment that is easy to work in and maintain. That's often thought of as <em>module</em> design, and is a standard for web development these days. I'm going to show you a way you can use module design to better organize your Grunt tasks.</p>\n<p><span></span></p>\n<p>I'm going to assume that you already know the basics of using Grunt. If you don't, here's an article by Chris to get you going: <a href=\"https://24ways.org/2013/grunt-is-not-weird-and-hard/\">Grunt for People Who Think Things Like Grunt are Weird and Hard</a>.</p>\n<p>If you use Grunt, you're probably used to seeing your Gruntfile looking something like this.</p>\n<pre rel=\"JavaScript (Gruntfile.js)\"><code>module.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    sass: {\n      dist: {\n        options: {\n          style: 'expanded',\n          sourcemap: 'none'\n        },\n        files: {\n          'style.css': 'sass/global.scss',      \n          'css/dev.style.css': 'sass/global.scss',\n          'css/ie9.style.css': 'sass/ie9.scss',\n        }\n      }\n    },\n    postcss: {\n      options: {\n        processors: [\n          require('autoprefixer')(),\n          require('rucksack-css')({ fallbacks: true })\n        ]\n      },\n      dist: {\n        src: 'style.css',\n        dest: 'style.css'\n      },\n      dev: {\n        src: 'css/dev.style.css',\n        dest: 'css/dev.style.css'\n      },\n    },\n    cssmin: {\n      target: {\n        files: {\n          'style.css': 'style.css'\n        }\n      }\n    },\n    concat: {\n      dist: {\n        src: [\n          'js/lib/no-conflict.js',\n          'js/lib/skip-navigation.js',\n        ],\n        dest: 'js/scripts.js'\n      },\n    },\n    jshint: {\n      files: [\n        'js/scripts.js',\n        'js/ie.js',\n      ],\n      options: {\n        scripturl: true,\n        globals: {\n          jQuery: true\n        }\n      }\n    },\n    uglify: {\n      options: {\n        mangle: false,\n        compress: true,\n        quoteStyle: 3\n      },\n      dist: {\n        files: {\n          'js/head.min.js': 'js/head.js',\n          'js/scripts.min.js': 'js/scripts.js',\n          'js/ie.min.js'     : 'js/ie.js',\n        }\n      }\n    },\n    watch: {\n      scripts: {\n        files: ['js/**/*.js'],\n        tasks: ['concat', 'uglify'],\n        options: {\n          spawn: false\n        }\n      },\n      css: {\n        files: ['sass/**/*.scss'],\n        tasks: ['sass', 'postcss', 'cssmin']\n      }\n    },\n  });\n  grunt.loadNpmTasks('grunt-postcss');\n  grunt.loadNpmTasks('grunt-contrib-concat');\n  grunt.loadNpmTasks('grunt-contrib-cssmin');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-jsvalidate');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-contrib-sass');\n  grunt.registerTask('default', ['watch']);\n};</code></pre>\n<p>This is pretty normal looking Gruntfile. Actually this is a pretty small one. I've seen Gruntfiles that have been three time this size. Looking at those large Gruntfiles gives me a headache. I've had module design drilled into me so much that seeing a Gruntfile that large throws me off my game. Why can't my Gruntfile look more like this?</p>\n<pre rel=\"JavaScript\"><code>module.exports = function(grunt) {\n  var tasks = {scope: ['devDependencies', 'dependencies' ]};\n  var options = {config: { src: \"grunt/*.js\" }};\n  var configs = require('load-grunt-configs')(grunt, options);\n  require('load-grunt-tasks')(grunt, tasks);\n  grunt.initConfig(configs);\n  grunt.registerTask('default', ['watch']);\n};</code></pre>\n<p>It can! I'm going to show you how. </p>\n<p>To accomplish this, we're going to install two Grunt packages. </p>\n<ol><li><a href=\"https://github.com/sindresorhus/load-grunt-tasks\">load-grunt-tasks</a></li>\n<li><a href=\"https://github.com/creynders/load-grunt-configs\">load-grunt-configs</a></li>\n</ol><p>Go ahead, and install these packages as you would any other Grunt package.</p>\n<pre rel=\"Command Line\"><code>$ npm install --save-dev load-grunt-tasks</code></pre>\n<pre rel=\"Command Line\"><code>$ npm install --save-dev load-grunt-configs</code></pre>\n<p>Now your `package.json` file should include the two packages like this.</p>\n<pre rel=\"JSON (package.json)\"><code>{\n  \"name\": \"your-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"Gruntfile.js\",\n  \"scripts\": {\n    \"test\": \"echo \"Error: no test specified\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"grunt-contrib-cssmin\": \"^1.0.1\",\n    \"load-grunt-configs\": \"^1.0.0\",\n    \"load-grunt-tasks\": \"^3.5.0\"\n  }\n}</code></pre>\n<p>For the sake of this article, I also included grunt-contrib-cssmin. Your `package.json` file should have any Grunt packages you'll need for your project.</p>\n<p>Now, let's start with a fresh `Gruntfile.js`. Create a new `Gruntfile.js` file and add the following.</p>\n<pre rel=\"JavaScript (Gruntfile)\"><code>module.exports = function(grunt) {\n\n}</code></pre>\n<p>The first thing we'll do is set up load-grunt-tasks. What load-grunt-tasks does is it creates all of your <code>grunt.loadNpmTasks()</code> for you. This removes the need to having to write out each <code>grunt.loadNpmTasks()</code> by hand.</p>\n<p>Let's create a variable <code>tasks</code> that will define the options for the load-grunt-tasks package. All we're going to do is define the scope and tell it to create a <code>grunt.loadNpmTasks()</code> for all the <code>devDependencies</code> and <code>dependencies</code> packages defined in the `package.json` file.</p>\n<pre rel=\"JavaScript (Gruntfile)\"><code>module.exports = function(grunt) {\n  var tasks = {scope: ['devDependencies', 'dependencies']};\n}</code></pre>\n<p>We'll need to require() it and add the <code>tasks</code> variable to it as the second parameter. Let's also add two more variables <strong>options</strong> and <strong>configs</strong> for load-grunt-configs.</p>\n<pre rel=\"JavaScript (Gruntfile)\"><code>module.exports = function(grunt) {\n  var tasks = {scope: ['devDependencies', 'dependencies' ]};\n  var options = {config: { src: \"grunt/*.js\" }};\n  var configs = require('load-grunt-configs')(grunt, options);\n  require('load-grunt-tasks')(grunt, tasks);\n}</code></pre>\n<p>In the <strong>options</strong> variable we telling load-grunt-configs where to look for the files that will contain the grunt task options. The <strong>configs</strong> variable is simply requiring load-grunt-configs and adding the <strong>options</strong> as the second variable. </p>\n<p>Finally, we'll add the <code>configs</code> variable to the <code>grunt.initConfig()</code> function and register a basic task that will run grunt-contrib-cssmin.</p>\n<pre rel=\"JavaScript (Gruntfile)\"><code>module.exports = function(grunt) {\n  var tasks = {scope: ['devDependencies', 'dependencies' ]};\n  var options = {config: { src: \"grunt/*.js\" }};\n  var configs = require('load-grunt-configs')(grunt, options);\n  require('load-grunt-tasks')(grunt, tasks);\n  grunt.initConfig(configs);\n  grunt.registerTask('default', ['cssmin']);\n}</code></pre>\n<p>That's all we'll be putting into the Gruntfile. The only other things you may want to add would be additional tasks you want to register. Like a <strong>watch</strong> task or a <strong>build</strong> task.</p>\n<p>In the <code>options</code> variable we defined the <em>src</em> as <code>grunt/*.js</code>. This tells load-grunt-configs to look in a directory named <strong>grunt</strong> and include all JavaScript files within it.</p>\n<p>Let's create a directory named <strong>grunt</strong> and add the task options for cssmin by creating a file named `cssmin.js`. Your project's directory structure should look similar to this now.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/08/directory-structure.png\" alt=\"\"></figure><p>Let's add the cssmin options to the `cssmin.js` file. The first thing you want to add is the Grunt module.exports variable just like in the Gruntfile, so that Grunt knows this file is to be loaded when you run your Grunt task. Then add the options for cssmin:</p>\n<pre rel=\"JavaScript (Gruntfile)\"><code>module.exports = {\n  target: {\n    files: {\n      'style.css': 'styles.css'\n    }\n  }\n};</code></pre>\n<p>If you noticed I didn't add the <code>'cssmin: {}'</code> wrapper like you would in a basic Gruntfile. This is because load-grunt-configs uses the file's name to recognize which task is being run. For example if you're using grunt-contrib-uglify the file name would be `uglify.js`. If you're using grunt-postcss. That file name will be `postcss.js`. </p>\n<p>This is how we're adding the module design concept to our grunt tasks. Each task will have its own file containing the task's options. This makes to easy to add new tasks, and for multiple developers to makes changes without the worries of accidentally messing up another task in a enormous Gruntfile.</p>\n<p>Now when you run your grunt task. Grunt will look in the `grunt` folder find all the task files and run those tasks using the options you defined within each file.</p>\n<p>This was a basic example of this technique. The <a href=\"https://github.com/sindresorhus/load-grunt-tasks\">load-grunt-tasks</a> and <a href=\"https://github.com/creynders/load-grunt-configs\">load-grunt-configs</a> packages have more options available that can give you even more control of your Grunt tasks. </p>\n<p>I hope this helps you get your Gruntfile under control and add more flexibility to your projects using Grunt. </p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/organizing-grunt-tasks/\">Organizing Your Grunt Tasks</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>"
      },
      {
          "title": "SVG Uploads in WordPress (the Inconvenient Truth)",
          "link": "https://bjornjohansen.no/svg-in-wordpress",
          "guid": "https://css-tricks.com/?p=244213",
          "pubDate": "Thu, 04 Aug 2016 12:20:40 +0000",
          "categories": [
              "Link",
              "SVG",
              "WordPress"
          ],
          "author": "Chris Coyier",
          "thumbnail": "",
          "description": "<p>Bjørn Johansen covers why:</p>\n<ol><li>It's easy to enable SVG uploads in WordPress (few lines to a functions.php file or functionality plugin)</li>\n<li>It makes sense why WordPress <em>doesn't</em> allow them by default.</li>\n</ol><p>Jake Archibald in the comments:</p>\n<p>In hindsight there probably should have been two content types, one that treats SVG has a full document context, and the other as a simple image (how browsers treat SVG in today, which cannot execute script or initiate fetches).</p>\n<p>Hear hear.</p>\n<p>I also had …</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/svg-uploads-wordpress-inconvenient-truth/\">SVG Uploads in WordPress (the Inconvenient Truth)</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>",
          "content": "<p>Bjørn Johansen covers why:</p>\n<ol><li>It's easy to enable SVG uploads in WordPress (few lines to a functions.php file or functionality plugin)</li>\n<li>It makes sense why WordPress <em>doesn't</em> allow them by default.</li>\n</ol><p>Jake Archibald in the comments:</p>\n<blockquote><p>In hindsight there probably should have been two content types, one that treats SVG has a full document context, and the other as a simple image (how browsers treat SVG in today, which cannot execute script or initiate fetches).</p></blockquote>\n<p>Hear hear.</p>\n<p>I also had someone tell me: \"I'd buy your <a href=\"https://abookapart.com/products/practical-svg\">new book</a>, but WordPress doesn't allow SVG, and I work in WordPress.\" To which I'd say, it's <em>only</em> the media uploader that disallows them, and as the article covers, it's easy to enable them (as long as you're aware of the risks). But you can use SVG to your heart's content as part of the <em>theme</em>.</p>\n<p><a href=\"https://bjornjohansen.no/svg-in-wordpress\" title=\"Direct link to featured article\">Direct Link to Article</a> — <a href=\"https://css-tricks.com/svg-uploads-wordpress-inconvenient-truth/\">Permalink</a></p><hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/svg-uploads-wordpress-inconvenient-truth/\">SVG Uploads in WordPress (the Inconvenient Truth)</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>"
      },
      {
          "title": "I Wrote a Book: Practical SVG",
          "link": "https://css-tricks.com/wrote-book-practical-svg/",
          "guid": "https://css-tricks.com/?p=244167",
          "pubDate": "Wed, 03 Aug 2016 15:41:25 +0000",
          "categories": [
              "Article",
              "Sponsored"
          ],
          "author": "Chris Coyier",
          "thumbnail": "",
          "description": "<p>Big news! The book I've been working on for a long time has been published and is now available to buy. It's called <a href=\"https://abookapart.com/products/practical-svg\">Practical SVG</a>. </p>\n\n<p><a href=\"https://abookapart.com/products/practical-svg\"></a><br>\nWhat's in the book?</p>\n<p>The book is a journey through things that I've learned about SVG through years of using it on all my production sites. Things I've researched. Things I've learned from other people. Battles fought, lost, fought again, won. Besides a lovely forward by Val Head, introduction and conclusion and such, this …</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/wrote-book-practical-svg/\">I Wrote a Book: Practical SVG</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>",
          "content": "<p>Big news! The book I've been working on for a long time has been published and is now available to buy. It's called <a href=\"https://abookapart.com/products/practical-svg\">Practical SVG</a>. </p>\n<p><span></span></p>\n<figure><a href=\"https://abookapart.com/products/practical-svg\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/08/ABA-hero-19.jpg\" alt=\"\"></a></figure><h3>What's in the book?</h3>\n<p>The book is a journey through things that I've learned about SVG through years of using it on all my production sites. Things I've researched. Things I've learned from other people. Battles fought, lost, fought again, won. Besides a lovely forward by Val Head, introduction and conclusion and such, this is the structure:</p>\n<ul><li>Chapter 1: The Basics of Using SVG</li>\n<li>Chapter 2: Software</li>\n<li>Chapter 3: Building an Icon System</li>\n<li>Chapter 4: Build Tools</li>\n<li>Chapter 5: Optimizing SVG</li>\n<li>Chapter 6: Sizing and Scaling SVG</li>\n<li>Chapter 7: Animating SVG</li>\n<li>Chapter 8: Some Design Features</li>\n<li>Chapter 9: Fallbacks</li>\n</ul><p>And in just 150 pages! It's meant to digest quickly.</p>\n<h3>Who is it for?</h3>\n<p>This book is for front end web designers and developers. Probably like... most of the people who read this site. \"Practical\" in the title means \"Day to day useful stuff for front end folk\". </p>\n<p>It's not really for super experts. I'm not a super expert, so I can't write that book. I wrote about what it took for me to start taking advantage of SVG and reap what it has to offer. It also certainly doesn't cover every nook and cranny of SVG. SVG is a huge world onto itself. I'd bet there is more to know about SVG then there is about HTML and CSS combined. But the basics will take you far.</p>\n<p>Nor is the book for super beginners. If you've never built a website ever before or messed around with HTML/CSS/JavaScript, there are probably too many foreign concepts in here. If you're looking for a beginner HTML and CSS book, perhaps check out the first two <a href=\"https://abookapart.com/products/\">A Book Apart</a> books: HTML5 for Web Designers and CSS3 for Web Designers. Then come back!</p>\n<h3>What's the story behind it?</h3>\n<p>It all started with my interest being peaked in SVG years ago. Peaked for rather obvious reasons: it's a fascinating technology. Vector graphics on the web! It just makes sense! As I learned about it, as I do, I started writing articles here on CSS-Tricks about it. More and more and more. </p>\n<p>Then I started doing conference talks about it. Throughout 2014 and 2015 I did a dozen or so talks like \"SVG is for Everybody\" and \"The Wonderful World of SVG\", including at conferences like An Event Apart. With all that research and writing in hand, it felt like a natural extension to convert it into a book. </p>\n<blockquote data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Reason #1!</p>\n<p>It represents a whole bunch of work.<a href=\"https://t.co/lsHUlJMqVZ\">https://t.co/lsHUlJMqVZ</a> <a href=\"https://t.co/FYhoS7M3tV\">pic.twitter.com/FYhoS7M3tV</a></p>\n<p>— Chris Coyier (@chriscoyier) <a href=\"https://twitter.com/chriscoyier/status/758343554167025664\">July 27, 2016</a></p></blockquote>\n<p>It certainly wasn't easy though. The book format demands more out of you. A clear structure. Intense accuracy. Words that guide you. </p>\n<p>Fortunately I had excellent help, like Katel LeDu guiding me through the entire process. Caren Litherland as an editor, keeping my foot out of my mouth and, most valuably, making sure everything read well and were comprehensible. Lisa Maria Martin cleaning house. Jason Santa Maria's lovely design along with Rob Weychert's perfect book composition. Chris Lilley's technical edit. That's one heck of a superteam if you ask me.</p>\n<h3>Time to feed your brain?</h3>\n<blockquote data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Got my new book ' Practical <a href=\"https://twitter.com/hashtag/SVG?src=hash\">#SVG</a> ' ! Time to feed my brain! Thanks <a href=\"https://twitter.com/chriscoyier\">@chriscoyier</a> <a href=\"https://t.co/pW5KHT3gFZ\">pic.twitter.com/pW5KHT3gFZ</a></p>\n<p>— ieatwebsites (@ieatwebsites) <a href=\"https://twitter.com/ieatwebsites/status/759826389537329152\">July 31, 2016</a></p></blockquote>\n<div>\n→→→ <a href=\"https://abookapart.com/products/practical-svg\">Go get it.</a> ←←←\n</div>\n<p></p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/wrote-book-practical-svg/\">I Wrote a Book: Practical SVG</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>"
      },
      {
          "title": "Precedence in CSS (When Order of CSS Matters)",
          "link": "https://css-tricks.com/precedence-css-order-css-matters/",
          "guid": "https://css-tricks.com/?p=243882",
          "pubDate": "Tue, 02 Aug 2016 15:49:35 +0000",
          "categories": [
              "Article"
          ],
          "author": "Chris Coyier",
          "thumbnail": "",
          "description": "<p>On your average CSS-writin' day, odds are you won't even think about precedence in CSS. It doesn't come up a whole heck of a lot. But it does matter! It comes up any time multiple CSS selectors match and element with the exact same <a href=\"https://css-tricks.com/specifics-on-css-specificity/\">specificity</a>. </p>\n<p>Assuming specificity is exactly the same, order <em>does</em> matter.</p>\n<p>Styles declared <em>later</em> win.\n</p>\n\n<p>Within a single stylesheet</p>\n<p>Say we have some HTML like this:</p>\n<p><code><!DOCTYPE html><br>\n<html lang=\"en\"><br>\n<head><br>\n  <meta charset=\"UTF-8\"><br>\n  <title>Document</title><br>\n  <link rel=\"stylesheet\" </code>…</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/precedence-css-order-css-matters/\">Precedence in CSS (When Order of CSS Matters)</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>",
          "content": "<p>On your average CSS-writin' day, odds are you won't even think about precedence in CSS. It doesn't come up a whole heck of a lot. But it does matter! It comes up any time multiple CSS selectors match and element with the exact same <a href=\"https://css-tricks.com/specifics-on-css-specificity/\">specificity</a>. </p>\n<div>\n<p>Assuming specificity is exactly the same, order <em>does</em> matter.</p>\n<p>Styles declared <em>later</em> win.</p></div>\n<p><span></span></p>\n<h3>Within a single stylesheet</h3>\n<p>Say we have some HTML like this:</p>\n<pre rel=\"HTML\"><code><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"module module-foo module-bar\">\n    Module\n  </div>\n</body>\n</html></code></pre>\n<p>The order of the attributes in the HTML <em>don't</em> matter. It's the order in the stylesheet. Let's focus on the <code>background</code>:</p>\n<pre rel=\"CSS\"><code>/* \n  All of these selectors match\n  and they all have the same specificity\n*/\n\n.module {\n  background: #ccc;\n  padding: 20px;\n  max-width: 400px;\n  margin: 20px auto;\n}\n\n.module-foo {\n  background: orange;\n}\n\n/* LAST declared, so these property/values win */\n.module-bar {\n  background: lightblue; /* I win! */\n\n  /* I still have all the _other_ styles as well */\n}</code></pre>\n<h3>An intentionally convoluted example</h3>\n<p>Order <em>is not</em> limited to a single stylesheet. The order of the stylesheet in the document matters even more.</p>\n<p>Check out this document with three distinct style... uh... let's call them chunks. A chunk being either a <code><link rel=\"stylesheet\"></code>, a <code><style></code> block, or an <code>@import</code>ed stylesheet. </p>\n<pre rel=\"HTML\"><code><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n\n  <!-- #1 -->\n  <link rel=\"stylesheet\" href=\"1.css\">\n\n  <!-- #2 -->\n  <style>\n    .module-baz {\n      background-color: pink;\n    }\n  </style>\n\n</head>\n<body>\n  <div class=\"module module-foo module-bar module-baz\">\n    Module\n  </div>\n\n  <!-- #3 -->\n  <style>\n    @import \"2.css\";\n    /*\n      Contains\n      .module-bar { background: #f06d06; }\n    */\n  </style>\n\n</body>\n</html></code></pre>\n<p>I labeled the chunks #1, #2, and #3. All of them contain CSS selectors with the same exact specificity. #3 is the last declared, so it wins the precedence battle.</p>\n<h3>Async loaded CSS still respects document order</h3>\n<p>Perhaps you're loading CSS with an awesome CSS loader like <a href=\"https://github.com/filamentgroup/loadCSS\">loadCSS</a>. What happens if we were to load a fourth CSS file with it with the exact same setup as the \"convoluted\" example above? </p>\n<p>loadCSS injects the stylesheet at the bottom of the <code><head></code> by default, so it would become #3 and the <code><style></code> block at the bottom of the body would become #4 and thus win.</p>\n<pre rel=\"HTML\"><code><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <link rel=\"stylesheet\" href=\"1.css\">\n\n  <script src=\"loadCSS.js\"></script>\n  <script>\n    loadCSS(\"2.css\");\n  </script>\n\n  <!-- 2.css will be injected right here -->\n</head>\n<body>\n  <div class=\"module module-foo module-bar module-late\">\n    Module\n  </div>\n</body>\n</html></code></pre>\n<p>It's actually invalid (although it works) to have a <code><link></code> or <code><style></code> block as a child of the <code><body></code>, so it would be really rare for a stylesheet loaded by loadCSS to not be the winner by default.</p>\n<p>Also, you can specify an ID to target so you can control CSS order:</p>\n<pre rel=\"HTML\"><code><script id=\"loadcss\">\n  // load a CSS file just before the script element containing this code\n  loadCSS(\"path/to/mystylesheet.css\", document.getElementById(\"loadcss\"));\n</script></code></pre>\n<h3>Does Critical CSS get weird?</h3>\n<p>One of the reason you might use loadCSS at all is because you're intentionally trying to defer loading of your stylesheet, because you're injecting <a href=\"https://css-tricks.com/annotating-critical-css/\">critical CSS</a> into the <code><head></code> to try and get styles into the first packet and speed up rendering.</p>\n<pre rel=\"HTML\"><code><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <style>\n    /* #1 \n       Critical CSS chunk up here */\n  </style>\n  <script>\n    /* #2\n       Load the rest of the CSS \n    */\n  </script>\n</head>\n<body>\n  <div class=\"module module-foo module-bar\">\n    Module\n  </div>\n</body>\n</html></code></pre>\n<p>The practice of critical CSS involves moving up CSS selectors into a higher chunk. The #1 chunk. The lowest-order and easiest-to-override chunk. So, theoretically, yes, there could be conflicts/changes in what CSS gets applied when comparing the page with <em>just</em> the critical CSS applied and with the CSS fully loaded. But the stylesheet does fully load, and comes after the critical CSS, so it will ultimately be as-intended. </p>\n<p>You might might need to fine-tune exactly what makes it into critical CSS and what does not - to avoid weird flash-of-style-changes. </p>\n<h3>Do extends get weird?</h3>\n<p>In a preprocessor, they can. </p>\n<p>Say you want to style a thing with a variation:</p>\n<pre rel=\"HTML\"><code><div class=\"module module-variation\">Module</div></code></pre>\n<p>And the (super simplified for demo purposes) preprocessor code ends up like:</p>\n<pre rel=\"SCSS\"><code>%variation {\n  background: orange;\n}\n\n.module {\n  background: #ccc;\n  padding: 20px;\n  max-width: 400px;\n  margin: 20px auto;\n}\n\n.module-variation {\n  @extend %variation;\n}</code></pre>\n<p>You'd think... OK, <code>.module-variation</code> is the LAST declared selector, so it wins, so the background should be orange. But it's not, because the extend moves the selector to where the thing it's extending is defined, which in our case is before what we are trying to override. The compiled CSS is:</p>\n<pre rel=\"CSS\"><code>.module-variation {\n  background: orange;\n}\n\n.module {\n  background: #ccc;\n  padding: 20px;\n  max-width: 400px;\n  margin: 20px auto;\n}</code></pre>\n<p>So the <code>background</code> is actually <code>#ccc</code>, not what we want. Probably easiest to solve this with specificity rather than source order.</p>\n<p>Native extends, should they <a href=\"https://tabatkins.github.io/specs/css-extend-rule/\">become a thing</a>, would presumably be less confusing.</p>\n<h3>It's a silly thing to manage</h3>\n<p>Nobody wants to think about this. Winning style with specificity is way easier. But knowing about it is a good idea, because unnecessary specificity bloat is a bummer too.</p>\n<p>And on we dance.</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/precedence-css-order-css-matters/\">Precedence in CSS (When Order of CSS Matters)</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>"
      },
      {
          "title": "High Performance SVGs",
          "link": "https://css-tricks.com/high-performance-svgs/",
          "guid": "https://css-tricks.com/?p=243783",
          "pubDate": "Mon, 01 Aug 2016 12:01:36 +0000",
          "categories": [
              "Advanced",
              "Article",
              "Intermediate",
              "performance",
              "SVG"
          ],
          "author": "Sarah Drasner",
          "thumbnail": "",
          "description": "<p>I recently worked on a project that was getting a ton of traffic but users were bouncing because the page load was too long at <strong>around 10 seconds</strong>. They called me in because the majority of the images on that site were SVGs, and they were animated. I trained the team how to <strong>decrease the file size on the SVGs</strong> while preserving the appearance and functionality, finally getting the load time to <strong>under 2 seconds</strong>. The bounce rate …</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/high-performance-svgs/\">High Performance SVGs</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>",
          "content": "<p>I recently worked on a project that was getting a ton of traffic but users were bouncing because the page load was too long at <strong>around 10 seconds</strong>. They called me in because the majority of the images on that site were SVGs, and they were animated. I trained the team how to <strong>decrease the file size on the SVGs</strong> while preserving the appearance and functionality, finally getting the load time to <strong>under 2 seconds</strong>. The bounce rate dropped dramatically and conversion was restored. </p>\n<p><span></span></p>\n<p>If I was designing these SVGs myself, I would not have run into many of these issues, but it’s a more likely scenario that the engineer and designer are not the same person on a project. In this post, I'll chronicle some of what I trained them on to ensure stellar performance for SVGs.</p>\n<p><strong>Note:</strong> I use Illustrator for the creation and optimization of my SVGs because I've found the export and tooling superior to Sketch's. I'll readily admit that there might be ways that Sketch works with SVGs that I'm not aware of. But I will say I have seen it make strange <code><clipPath></code>s in the place of paths, which makes me steer clear of it. For the examples below, I'll be using Illustrator. Use whatever works for you.</p>\n<h3>Talk Upfront</h3>\n<p>This piece is not always possible, but whenever it is, try to talk to the designer before they do a lot of the work, to explain what they should be thinking about when they are creating SVGs.</p>\n<p>The most easy to convey piece should be that simply drawing something on paper and then tracing it in illustrator will come with a lot of junky path data and should never be used as-is. <strong>Simple shapes and pen drawing paths are preferred.</strong> Very complex objects can become large very quickly, so the less points the path has to draw, the better for performance. </p>\n<p>This doesn’t mean that you can’t make seemingly complex shapes. But hundreds of path points can sometimes have the same appearance and interest that thousands of path points do. </p>\n<h3>Reduce Path Points</h3>\n<p>If you’re going to create a hand drawing, you can trace, it, but past that point you should use <b>Object > Path > Simplify</b>. </p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/simplify.gif\" alt=\"Object > Path > Simplify with Preview\"></figure><p>You will need to check the box that allows for preview because this can potentially ruin the image. It's also worth it to say that the image degrades quickly, so usually the most I can get away with is 91% or so. This still gives me a good return, with a high number of path point reduction.</p>\n<p>This is also probably the quickest way to accomplish this type of reduction. A more labor intensive way, that I will use for smaller pieces that are unnecessarily complex, is to redraw it with the pen tool. </p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/08/redraw.jpg\" alt=\"redraw the path points\" srcset=\"https://cdn.css-tricks.com/wp-content/uploads/2016/08/redraw.jpg 600w, https://cdn.css-tricks.com/wp-content/uploads/2016/08/redraw-263x300.jpg 263w\" sizes=\"(max-width: 600px) 100vw, 600px\"></figure><p>Sometimes this is very little effort for a large payoff, but it really depends on the shape. You can also put a few shapes together, merge them with the path tool, and then modify the points with the white arrow, to simulate existing shapes.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/08/shapes.jpg\" alt=\"Join many shapes together\" srcset=\"https://cdn.css-tricks.com/wp-content/uploads/2016/08/shapes.jpg 600w, https://cdn.css-tricks.com/wp-content/uploads/2016/08/shapes-300x221.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\"></figure><p>It may seem intimidating at first, but you can use the pen tool to really quickly make more complex areas. Then take all of these shapes and use the pathfinder tool to merge them all together. If it doesn’t look quite right, don’t fear! You can still reduce the opacity on what you made by a little (helps so that you can see what you’re trying to emulate in the shape underneath). Then you can grab the direct selection tool, (A in quickkeys, the white arrow on the toolbar), and drag those small points around until you get a more refined shape. Never hurts to zoom in a bit to see the details there.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/08/redraw2.jpg\" alt=\"Adjust path points\" srcset=\"https://cdn.css-tricks.com/wp-content/uploads/2016/08/redraw2.jpg 600w, https://cdn.css-tricks.com/wp-content/uploads/2016/08/redraw2-288x300.jpg 288w\" sizes=\"(max-width: 600px) 100vw, 600px\"></figure><h3>Remove Repeated Gradient Defs</h3>\n<p>By default, Illustrator and other vector editing tools will, at best, create a gradient and put them in <code>defs</code>, but at worst, create jpgs of the gradient or add many separate gradients even though just one can be reused. In the latter case, use <a href=\"http://codepen.io/jakealbaugh/full/OVrQXY/\">Jake Albaugh’s gradient optimizer</a>. It’s a smart tool that will collapse multiple unused gradients into only what’s necessary. I've seen it reduce the file size of an SVG by half, though that was a file with an unusual amount of similar gradients.</p>\n<p>In the case of the former, you might find you can write the gradient by hand instead of using the png or jpg that the editor provides. Here are the values that SVG needs to create a gradient:</p>\n<ul><li>It needs to be contained within a linearGradient block, and needs to have an id so that you can reference it in the CSS to apply it to SVG elements</li>\n<li>It uses stop offsets from 0-1 with stop-color attributes where you specify what colors you want at which points.</li>\n</ul><pre rel=\"SVG\"><code><defs>\n  <linearGradient id=\"linear-gradient\" y1=\"75\" x2=\"150\" y2=\"75\" gradientUnits=\"userSpaceOnUse\">\n    <stop offset=\"0\" stop-color=\"#fff33b\"/>\n    <stop offset=\".5\" stop-color=\"#f17b3e\"/>\n    <stop offset=\"1\" stop-color=\"#e93e3a\"/>\n  </linearGradient>\n</defs></code></pre>\n<pre rel=\"CSS\"><code>.path-class { fill: url(#linear-gradient); }</code></pre>\n<h3>Reduce the size of your Canvas</h3>\n<p>Making your canvas not too large but not too small helps with the weight of the file because the larger the number, the larger the number of all of the path points. Too small, and you might get a lot of decimals, that when trimmed, warp the image. If you have a nice range (I prefer somewhere like 100 x 100- but this is worth experimenting with), your path points will be small as well without breaking into decimals.</p>\n<p>To quickly change the size of the artboard in Illustrator (the viewBox in SVG), you can go to <b>Object > Artboards > Fit to Artwork Bounds</b>. Sometimes you will want to be a little more precise about it, and in that case go to <b>File > Document Setup > Edit Artboards</b>. This will allow you to hand-tweak the visible area or even specify the units you want precisely. You may have to change the size of the artwork within a little after doing so as well.</p>\n<h3>Export, then Optimize</h3>\n<p>I prefer to use Illustrator because the export settings for SVG are more advanced than Sketch. I don’t use Inkscape but I know some people love it. If you are using Illustrator, use <b>Export As > SVG</b> not <b>Save As > SVG</b> for better results. Even after that step, though, I optimize. Here are some options:</p>\n<ul><li><a href=\"https://jakearchibald.github.io/svgomg/\">SVGOMG</a>- this is a web-based editor that uses SVGO, it also offers service workers for offline capability</li>\n<li><a href=\"https://github.com/svg/svgo\">SVGO</a>/<a href=\"https://github.com/svg/svgo-gui\">SVGO-GUI</a>- this NodeJS-based tool is extremely well done with a lot of options. I recommend using the GUI with it, though, because SVG export can change its appearance.</li>\n<li><a href=\"https://petercollingridge.appspot.com/svg-editor\">Peter Collingridge’s SVG Editor</a>- I'm still a fan of this one even though it's not quite as fancy. I also like playing with the experimental editing tab.</li>\n</ul><p>Be mindful of the toggles here. The ones that I find myself checking and unchecking the most are:</p>\n<ul><li><strong>Clean IDs</strong>- this will remove any carefully named layers you may have.</li>\n<li><strong>Collapse useless groups</strong>- you might have grouped them to animate them all together, or just to keep things organized.</li>\n<li><strong>Merge paths</strong>- nine times out of ten this one is ok, but sometimes merging a lot of paths keeps you from being about to move elements in the DOM around independently.</li>\n<li><strong>Prettify</strong>- This is only necessary when you need to working within the SVG, for animation or other manipulation purposes.</li>\n</ul><p>Finally, make sure you're gzipping your files (I usually do this as part of the overall build process), but it makes a huge difference in terms of SVG filesize.</p>\n<h3>Use SVG Filters instead of Appearance Effects</h3>\n<p>A few times while working with an SVG from another designer, we discovered that using the effects in the appearance panel, such as drop shadow, produced a monster base64 file that was cumbersome and expensive. This problem can be solved by using an SVG filter instead, available at <b>Effect > SVG Filters</b> and then choosing one from the dropdown. It's worth mentioning that these will be available to you only when the file is in .ai format, not once it's in .svg format (which is why I recommend always keeping the .ai source file). By swapping these out, not only did we improve the appearance of the SVG, but we decreased the filesize from a whopping <strong>1.8MB to 1.2KB</strong>!</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/svg-filters.gif\" alt=\"Using SVG filters from the Illustrator Dropdown\"></figure><h3>Create a Large Background Shape</h3>\n<p>When tracing an image, oftentimes you will be handed an image with pattern or multiple images “on top of” a background. But Illustrator will not understand these shapes as one large shape beneath a pattern or many other shapes - it will break the base color into the shapes between the pattern.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/08/all-pattern.jpg\" alt=\"\" srcset=\"https://cdn.css-tricks.com/wp-content/uploads/2016/08/all-pattern.jpg 600w, https://cdn.css-tricks.com/wp-content/uploads/2016/08/all-pattern-294x300.jpg 294w\" sizes=\"(max-width: 600px) 100vw, 600px\"></figure><p>Here is an example of an easy win because you can remove all of these shapes and replace it with one big background image. I find it easiest to trace around the whole containing unit first before removing anything. Remember to make this layer a different color from everything else.</p>\n<p>Many times the shapes behind can be grabbed all at once by using <b>Select > Same > Fill Color</b> (or Fill and Stroke). This allows you to grab many shapes at once and delete them all at once very quickly.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/08/same-fill.jpg\" alt=\"\" srcset=\"https://cdn.css-tricks.com/wp-content/uploads/2016/08/same-fill.jpg 600w, https://cdn.css-tricks.com/wp-content/uploads/2016/08/same-fill-300x286.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\"></figure><h3>Conclusion</h3>\n<p>These aren't the only ways out there to work with SVGs for better performance, but the main key takeaway is that the less path data you have the better. Being mindful of what you're loading in your SVG files - double check the SVG DOM for cruft and remember to optimize. Going the extra mile designing for performance can shave vital seconds off of the page load of your site.</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/high-performance-svgs/\">High Performance SVGs</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>"
      },
      {
          "title": "CSS Writing Mode",
          "link": "https://ishadeed.com/article/css-writing-mode/",
          "guid": "https://css-tricks.com/?p=244083",
          "pubDate": "Mon, 01 Aug 2016 11:53:18 +0000",
          "categories": [
              "Link"
          ],
          "author": "Chris Coyier",
          "thumbnail": "",
          "description": "<p>Ahmad Shadeed with a bonafide CSS trick:</p>\n<p>I noticed a CSS property called <code>writing-mode</code>, this was the first time that I know of it. After some research, I learned that its purpose is for vertical language scripts, like Chinese or Japanese. However, the interesting thing is that when using it with English, we can create a vertical text very easily.</p>\n<p>Even in English, <code>writing-mode: vertical-lr;</code> help us lay out text vertically without a bunch of positioning, placeholding, and transforms.…</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-writing-mode/\">CSS Writing Mode</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>",
          "content": "<p>Ahmad Shadeed with a bonafide CSS trick:</p>\n<blockquote><p>I noticed a CSS property called <code>writing-mode</code>, this was the first time that I know of it. After some research, I learned that its purpose is for vertical language scripts, like Chinese or Japanese. However, the interesting thing is that when using it with English, we can create a vertical text very easily.</p></blockquote>\n<p>Even in English, <code>writing-mode: vertical-lr;</code> help us lay out text vertically without a bunch of positioning, placeholding, and transforms.</p>\n<p><a href=\"https://ishadeed.com/article/css-writing-mode/\" title=\"Direct link to featured article\">Direct Link to Article</a> — <a href=\"https://css-tricks.com/css-writing-mode/\">Permalink</a></p><hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-writing-mode/\">CSS Writing Mode</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>"
      },
      {
          "title": "The State of CSS Reflections",
          "link": "https://css-tricks.com/state-css-reflections/",
          "guid": "https://css-tricks.com/?p=244009",
          "pubDate": "Fri, 29 Jul 2016 17:24:25 +0000",
          "categories": [
              "Article",
              "loader",
              "reflection",
              "SVG"
          ],
          "author": "Ana Tudor",
          "thumbnail": "",
          "description": "<p>I recently <a href=\"http://codepen.io/TheDutchCoder/pen/IKqpA/\">saw this loader</a> on CodePen, a pure CSS 3D rotating set of bars with a fading reflection. It's done by using an element for each bar, then duplicating each and every one of these elements to create the reflection and finally adding a gradient cover to create the fading effect. Which sounds a bit like scratching behind your right ear with the toes of your left foot! Not to mention the gradient cover method for the fading effect …</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/state-css-reflections/\">The State of CSS Reflections</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>",
          "content": "<p>I recently <a href=\"http://codepen.io/TheDutchCoder/pen/IKqpA/\">saw this loader</a> on CodePen, a pure CSS 3D rotating set of bars with a fading reflection. It's done by using an element for each bar, then duplicating each and every one of these elements to create the reflection and finally adding a gradient cover to create the fading effect. Which sounds a bit like scratching behind your right ear with the toes of your left foot! Not to mention the gradient cover method for the fading effect doesn't work with non-flat-color backgrounds. Isn't there a better way to do this with CSS?</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/original.gif\" alt=\"\"></figure><p>The answer is: \"yes\" and \"no\". <span></span> \"Yes\", there are things that really could work and \"no\", they aren't really there yet. Sadly, while the code can be compacted a bit using a preprocessor (not much outside what can get generated in a loop though), the method of duplicating all bars for the reflection and using a gradient cover for the fading effect is still the best way of doing this if we don't want to use canvas and we want the result to work across the current versions of all main browsers.</p>\n<p>This article is going to explore the options we have today for creating the reflection, illustrate the \"almost\" solutions, how cross-browser issues cause pain and, finally, discuss my thoughts on what should be done.</p>\n<h3>Basic setup for the demo</h3>\n<p>Before we get to reflections, let's see how we create, position and shade the bars as this part is common for all browsers.</p>\n<h4>Creating the bars</h4>\n<p>First of all, we create a wrapper <code>.loader</code> element with 10 <code>.bar</code> elements in it.</p>\n<pre rel=\"HTML\"><code><div class='loader'>\n  <div class='bar'></div>\n  <!-- repeat to create 9 more bars -->\n</div></code></pre>\n<p>Writing the same thing multiple times is a pain, so it's easier to use a preprocessor in such situations. We're using Haml here, but any other one will do.</p>\n<pre rel=\"Haml\"><code>.loader\n  - 10.times do\n  .bar</code></pre>\n<p>We position all these elements absolutely starting from the middle of the viewport. In most cases, we use <code>top: 50%</code>, but, in this case, it will be more convenient later if we use <code>bottom: 50%</code>:</p>\n<pre rel=\"CSS\"><code>div {\n  position: absolute;\n  bottom: 50%; left: 50%;\n}</code></pre>\n<p>We decide on a <code>width</code> and a <code>height</code> for the bars and we give them a <code>background</code> just so that we can see them:</p>\n<pre rel=\"SCSS\"><code>$bar-w: 1.25em;\n$bar-h: 5 * $bar-w;\n\n.bar {\n  width: $bar-w; height: $bar-h;\n  background: currentColor;\n}</code></pre>\n<p>We want the bottom edge of the bars to coincide with the middle line of the viewport (separating the viewport into two equal parts) and we already have that as we've used <code>bottom: 50%</code>.</p>\n<p>At this point, our bars are all stacked one on top of the other, their left edge being on the vertical line splitting the viewport into two equal halves (left and right) and their bottom edge being on the horizontal line splitting the viewport into two equal halves (top and bottom).</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"f056c003ebd630f2a79caada0b9d4cb5\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><h3>Positioning the bars</h3>\n<p>We need to position them such that the left edge of the first (leftmost) one and the right edge of the last (rightmost) one are at equal distance from the vertical line dividing the viewport into two equal halves. This distance is always half the number of bars (<code>$n</code>) times the bar <code>width</code> (<code>$bar-w</code>). The original demo uses vanilla CSS, but we're going with Sass now to reduce the amount of code.</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"712f670bd911acc9a96d53f519aa7748\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>This means that, <em>starting from the position that all the bars are in now</em>, we need to shift the first bar to the left by <code>.5 * $n * $bar-w</code>. The left is the negative direction of the <code>x</code> axis, which means we need a <code>-</code> (minus) in front of it. So the <code>margin-left</code> value for the first bar is <code>-.5 * $n * $bar-w</code>. </p>\n<p>The second bar (of <code>0</code>-based index <code>1</code>) is <code>1</code> bar width (<code>$bar-w</code>) to the right (in the positive direction of the <code>x</code> axis). So the <code>margin-left</code> value for this bar is <code>-.5 * $n * $bar-w + $bar-w</code>.</p>\n<p>The third bar (of <code>0</code>-based index <code>2</code>) is <code>2</code> bar widths to the right (in the positive direction of the <code>x</code> axis). So the <code>margin-left</code> value for this bar is <code>-.5 * $n * $bar-w + 2 * $bar-w</code>.</p>\n<p>The last bar (of <code>0</code>-based index <code>$n - 1</code>) is <code>$n - 1</code> bar widths to the right (in the positive direction of the <code>x</code> axis). So the <code>margin-left</code> value for this bar is <code>-.5 * $n * $bar-w + ($n - 1) * $bar-w</code>.</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"45074d661ff151ce03e6ede3bd440676\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>In general, if we consider <code>$i</code> to be the <code>0</code>-based index of the current bar, then the <code>margin-left</code> value for this <code>$i</code>-th bar is <code>-.5 * $n * $bar-w + $i * $bar-w</code>, which can be compacted as <code>($i - .5 * $n) * $bar-w</code>.</p>\n<p>This allows us to position the bars with a Sass loop:</p>\n<pre rel=\"SCSS\"><code>$n: 10;\n\n@for $i from 0 to $n {\n  .bar:nth-child(#{$i + 1}) {\n  margin-left: ($i - .5 * $n) * $bar-w;\n  }\n}</code></pre>\n<p>We also give them a <code>box-shadow</code> so we can see where a bar ends and the next one begins:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"ce7cc9a75e13fc7683599e39138ab334\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><h4>Shading the bars</h4>\n<p>The backgrounds of the bars go from a dark blue (<code>#1e3f57</code>) for the leftmost bar to a light blue (<code>#63a6c1</code>) for the rightmost one. This sounds like a job for <a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\">the Sass <code>mix()</code> function</a>! The first argument would be the light blue, the second one the dark blue and the third one (called the relative weight) the amount (in <code>%</code>) of the light blue to be included in the resulting mix.</p>\n<p>For the first bar, this amount would be <code>0%</code> - <code>0%</code> of the light blue in the result, so this result would be just the dark blue.</p>\n<p>For the last bar, the amount would be <code>100%</code> - <code>100%</code> of the light blue in the final result (which also means <code>0%</code> of the darker shade), which would make the background light blue.</p>\n<p>For the rest of the bars, we need intermediate values distributed evenly. If we have <code>$n</code> bars, the first bar is at <code>0%</code> and the last one at <code>100%</code>, then we need to split the interval between them into <code>$n - 1</code> equal intervals.</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"qNKWay\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>In general, the relative weight for the bar of index <code>$i</code> is <code>$i * 100% / ($n - 1)</code>, which means we need to add the following code:</p>\n<pre rel=\"SCSS\"><code>$c: #63a6c1 #1e3f57; // 1st = light 2nd = dark\n\n@for $i from 0 to $n {\n  // list of mix() arguments for current bar\n  $args: append($c, $i * 100% / ($n - 1));\n\n  .bar:nth-child(#{$i + 1}) {\n  background: mix($args...);\n  }\n}</code></pre>\n<p>Now the bars look like in the original demo:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"24ee9933e6f4dfff244d664fd2334655\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><h3>Exploring the options for the reflection</h3>\n<h4>WebKit browsers: <code>-webkit-box-reflect</code></h4>\n<p>Oh, no, a non-standard property! I don't know why it didn't become a standard. I hadn't even heard of CSS when this first landed in Safari. But, for WebKit browsers, it does the job and it does it well! A lot of work went into it. It's easy to use and it doesn't break anything in non-supporting browsers, it just doesn't display a reflection.</p>\n<p>Let's see how this works. The value it takes has three parts:</p>\n<ul><li>a <strong>direction</strong>, which can be any of the <code>below</code>, <code>left</code>, <code>above</code>, <code>right</code> keywords</li>\n<li>an optional <strong>offset</strong>, which specifies how far from the edge of the element the reflection should start (this is a CSS length value)</li>\n<li>an optional image <strong>mask</strong> (which can be a CSS gradient)</li>\n</ul><p>The following interactive demo illustrates this (click the direction, offset, gradient angle, stop alphas and offsets to change them):</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"BzWwrz\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p><em>Note that the <code>linear-gradient()</code> could have more stops or it could be replaced by a <code>radial-gradient()</code>.</em></p>\n<p>In our case, the first thing that springs to mind is to add this on the <code>.loader</code> element:</p>\n<pre rel=\"SCSS\"><code>.loader {\n  -webkit-box-reflect: below 0 linear-gradient(rgba(#fff), rgba(#fff, .7));\n}</code></pre>\n<p>However, if we test this in a WebKit browser, we don't see any reflection!</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"89d33cc4fa780182545300ee7988c58b\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>What is happening here? We have positioned all our elements absolutely and we haven't set any explicit dimensions on our <code>.loader</code> element which contains the bars. This makes it a <code>0x0</code> element - zero <code>width</code>, zero <code>height</code>.</p>\n<p>So let's give it some explicit dimensions, a <code>height</code> equal to that of the bars (<code>$bar-h</code>) and a <code>width</code> big enough to contain all the bars (<code>$n * $bar-w</code>). We also temporarily give it a <code>box-shadow</code> just so we can see its boundaries clearly:</p>\n<pre rel=\"SCSS\"><code>$loader-w: $n * $bar-w;\n\n.loader {\n  width: $loader-w; height: $bar-h;\n  box-shadow: 0 0 0 1px red;\n}</code></pre>\n<p>I prefer <code>box-shadow</code> over <code>outline</code> when highlighting the boundaries of an element as <a href=\"http://codepen.io/thebabydino/pen/yJzPog\"><code>outline</code> is inconsistent across browsers when children overflow their parents</a>.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_box_sh_vs_outline.png\" alt=\"\" srcset=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_box_sh_vs_outline.png 660w, https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_box_sh_vs_outline-300x250.png 300w\" sizes=\"(max-width: 660px) 100vw, 660px\"><br><figcaption>How box-shadow and outline behave in WebKit browsers and Edge (top) vs. Firefox (bottom) - outline gives different results when children overflow</figcaption></figure><p>The result of adding the above code can be seen live in WebKit browsers in the following Pen:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"a5962276e4faa6c91acdceaf48411aa2\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>If you're not on a WebKit browser, here's what it looks like:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_2.1.2.png\" alt=\"\" srcset=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_2.1.2.png 450w, https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_2.1.2-300x213.png 300w\" sizes=\"(max-width: 450px) 100vw, 450px\"><br><figcaption>screenshot of the result in Chrome after explicitly sizing the <code>.loader</code> element</figcaption></figure><p>We can see the loader boundaries and we can see some reflection now, but things aren't positioned correctly anymore. We want the loader to be dead in the middle horizontally, so we shift it to the left by half its <code>width</code>. We also want the bottom of the bars to coincide with the bottom of their parent, so we set <code>bottom: 0</code> on them:</p>\n<pre rel=\"SCSS\"><code>.loader { margin-left: -.5 * $loader-w; }\n\n.bar { bottom: 0; }</code></pre>\n<p>This fixes the positioning issue. Here's what it looks like now:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_2.1.3.png\" alt=\"\" srcset=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_2.1.3.png 340w, https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_2.1.3-300x282.png 300w\" sizes=\"(max-width: 340px) 100vw, 340px\"></figure><p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"8da384c6046b5548780e4a1a890e4bdd\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><h4>Firefox: <code>element()</code> + <code>mask</code></h4>\n<h5>Creating the reflection with <code>element()</code></h5>\n<p>The <code>element()</code> function (still <a href=\"https://drafts.csswg.org/css-images-4/#element-notation\">in the works</a>, so far only implemented by Firefox with the <code>-moz-</code> prefix) gives us an image value that we should be able to use anywhere an actual image can be used (works for <code>background</code>, for <code>border-image</code>, but doesn't seem to work <a href=\"http://codepen.io/thebabydino/pen/KrXQqL?editors=1100#0\">as a value for pseudo <code>content</code></a> - see bug <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1285811\">1285811</a>). It takes one argument which is the <code>id</code> selector of the element we want to see displayed as a <code>background</code> or a <code>border-image</code>. This allows us to do evil things like using images of controls as backgrounds. But it can also come in handy if we want to get an element reflected in Firefox.</p>\n<p>One very important thing to know about the <code>element()</code> function is that it's not recursive - we cannot create fractals by using elements as their own backgrounds. This makes it safe to use on a loader pseudo for creating the reflection so we don't need to use an extra element.</p>\n<p>Alright, let's see how we do this. First of all, we give our loader element an <code>id</code> (let's say the obvious <code>loader</code>). Moving on to the styling, we start from the exact same CSS we have in the final demo for the WebKit case. Then we add an <code>::after</code> pseudo on the loader, absolutely positioned and covering it fully.</p>\n<pre rel=\"CSS\"><code>.loader::after {\n  position: absolute;\n  top: 0; right: 0; bottom: 0; left: 0;\n  box-shadow: 0 0 0 2px currentColor;\n  color: crimson;\n  content: 'REFLECTION';\n}</code></pre>\n<p>We've also set a few more temporary styles just so we can have a clear idea of this pseudo's boundaries and orientation as in the final form, we want it to be upside down:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"392fc3dd59fa1d57ea0ea0bc80965f39\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>Now we need to reflect our <code>::after</code> pseudo against its bottom edge. In order to do this, we use a <code>scaleY()</code> transform with a properly chosen <code>transform-origin</code>. The following interactive demo illustrates how directional scaling works for various scale factors and transform origins:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"yJzkJA\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>Note that the values for the scale factors and the <code>transform-origin</code> can go beyond the limits imposed by this demo.</p>\n<p>In our case, we need a <code>scaleY(-1)</code> and a <code>transform-origin</code> on the line of the bottom edge of the <code>::after</code> pseudo:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_via_scale.gif\" alt=\"\"><br><figcaption>reflect an element down using a <code>scaleY(-1)</code> transform with an appropriate <code>transform-origin</code></figcaption></figure><p>We add this to the code and we set the <code>#loader</code> as the background of its <code>::after</code> pseudo using the <code>element()</code> function (with a prefix because that's the only way it's supported for now).</p>\n<pre rel=\"CSS\"><code>.loader::after {\n  transform-origin: 0 100%;\n  transform: scaleY(-1);\n  background: -moz-element(#loader);\n}</code></pre>\n<p>Note that we use <code>.loader</code> for the selector for specificity reasons and <code>#loader</code> as the argument of the <code>element()</code> function as that needs to be an <code>id</code> selector.</p>\n<p>The result of adding the above code can be seen in the following Pen (Firefox-only):</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"cfd107a5b6cf0a1508d411e59dce8630\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>For everyone reading this on other browsers, here's a screenshot of what it looks like:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_2.2.2.png\" alt=\"\" srcset=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_2.2.2.png 340w, https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_2.2.2-300x282.png 300w\" sizes=\"(max-width: 340px) 100vw, 340px\"><br><figcaption>result of the reflection using the <code>element()</code> function in Firefox</figcaption></figure><h5>Fading the reflection with <code>mask</code></h5>\n<p>We fade the reflection the same way we did in the WebKit case: using a mask. In that case, the mask was a component of the <code>-webkit-box-reflect</code> value. In this case, we're talking about the CSS <code>mask</code> property which takes an SVG reference for a value:</p>\n<pre rel=\"CSS\"><code>mask: url(#fader);</code></pre>\n<p>Our <code>#fader</code> element is an SVG <code>mask</code> element containing a rectangle.</p>\n<pre rel=\"SVG\"><code><svg>\n  <mask id='fader' maskContentUnits='objectBoundingBox'>\n    <rect width='1' height='1'/>\n  </mask>\n</svg></code></pre>\n<p>We can compact this a bit with Haml:</p>\n<pre rel=\"Haml\"><code>%svg\n  %mask#fader(maskContentUnits='objectBoundingBox')\n    %rect(width='1' height='1')</code></pre>\n<p>However, if we actually add the above to our code, our reflection disappears - this can be tested by viewing the following demo in Firefox:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"25248bfa431c5e56fb3e37fb506c0866\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>This is because, by default, SVG shapes have a solid black <code>fill</code>, completely opaque and, at the same time, our mask is <a href=\"http://tympanus.net/codrops/css_reference/mask-mode/\">a luminance mask</a> by default. So what we need to do in order to make the reflection fade is give the rectangle a <code>fill</code> that's a reference to an SVG <code>linearGradient</code>.</p>\n<pre rel=\"Haml\"><code>%rect(width='1' height='1' fill='url(#grad)')</code></pre>\n<p>An SVG <code>linearGradient</code> is defined between two points specified by the <code>x1</code>, <code>y1</code>, <code>x2</code> and <code>y2</code> attributes. <code>x1</code> and <code>y1</code> are the coordinates of the start point (<code>0%</code>) of the gradient line, while <code>x2</code> and <code>y2</code> are the coordinates of the end point (<code>100%</code>) of this line. If these are missing, they are taken to be <code>0%</code>, <code>0%</code>, <code>100%</code> and <code>0%</code> respectively. These values describe the line from the top left (<code>0% 0%</code>) to the top right (<code>100% 0%</code>) of the element on which is applied (since the default value for <code>gradientUnits</code> is <code>objectBoundingBox</code>), meaning that, by default, the gradient goes from left to right.</p>\n<p>But in our case, we want the gradient to go from <code>top</code> to <code>bottom</code>, so we change the value for <code>x2</code> from <code>100%</code> to <code>0%</code> and the value for <code>y2</code> from <code>0%</code> to <code>100%</code>. This makes the gradient vector go from the top left corner (<code>0% 0%</code>) to the bottom left (<code>0% 100%</code>) corner of the element on which it's applied.</p>\n<pre rel=\"Haml\"><code>%linearGradient#grad(x2='0%' y2='100%')</code></pre>\n<p>Inside the <code>linearGradient</code> element, we have at least two <code>stop</code> elements. These have three specific attributes: <code>offset</code>, <code>stop-color</code> and <code>stop-opacity</code>.</p>\n<ol><li><code>offset</code> can take a <code>%</code> value, usually between <code>0%</code> and <code>100%</code>, just like in the case of CSS gradients. It can also take a number value, usually between <code>0</code> and <code>1</code>.</li>\n<li><code>stop-color</code> can take a keyword, <code>hex</code>, <code>rgb()</code>, <code>rgba()</code>, <code>hsl()</code> or <code>hsla()</code> value. In theory. In practice, <a href=\"https://codepen.io/AmeliaBR/details/jrBOBv\">Safari doesn't support semitransparent values</a>, so if we want semitransparency in our gradients, we should rely on the third attribute...</li>\n<li><code>stop-opacity</code>. This takes a value between <code>0</code> (fully transparent) and <code>1</code> (fully opaque).</li>\n</ol><p>We need to keep in mind that the loader pseudo on which we're applying the gradient mask has been reflected down via a <code>scaleY(-1)</code> transform. This means that the bottom of our gradient mask is visually up. So our gradient needs to go from completely transparent at the top (visually down) to an alpha of <code>.7</code> at the bottom (visually up).</p>\n<p>Since our gradient goes from top to bottom, the first stop is the fully transparent one.</p>\n<pre rel=\"Haml\"><code>%linearGradient#grad(x2='0%' y2='100%')\n  %stop(offset='0' stop-color='#fff' stop-opacity='0')\n  %stop(offset='1' stop-color='#fff' stop-opacity='.7')</code></pre>\n<p>Adding the linear gradient gives us the result we wanted in Firefox as well:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_2.2.4.png\" alt=\"\" srcset=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_2.2.4.png 340w, https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_2.2.4-300x282.png 300w\" sizes=\"(max-width: 340px) 100vw, 340px\"></figure><p>This Pen shows it live:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"f3c942a122897f329f3846a2385e5948\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><h3>The SVG gradient problem</h3>\n<p>In our case, things are pretty simple because our masking gradient is vertical. But what about gradients that aren't vertical, or horizontal or don't go from one corner to the other? What if we want to have a gradient at a certain angle?</p>\n<p>Well, SVG gradients also have an attribute called <code>gradientTransform</code> that can rotate the gradient line defined by the <code>x1</code>, <code>y1</code>, <code>x2</code> and <code>y2</code> attributes. One might think that's an easy way to reproduce CSS gradients at an angle. But... it's not that simple!</p>\n<p>Let's consider the case of a gradient from gold to crimson. To make things clearer, we give it a sharp transition between the two at <code>50%</code>. Initially, we take the angle of the CSS version of this gradient to be <code>0deg</code>. This means that the gradient goes from <code>0%</code> at the bottom (gold) to <code>100%</code> at the top (crimson). The CSS to create this gradient would be:</p>\n<pre rel=\"CSS\"><code>background-image: \n  linear-gradient(0deg, #e18728 50%, #d14730 0);</code></pre>\n<p>If there are things you don't understand about how CSS linear gradients work, you can check out <a href=\"https://medium.com/@patrickbrosset/do-you-really-understand-css-linear-gradients-631d9a895caf#.3d41n85zh\">this excellent piece</a> by <a href=\"https://twitter.com/patrickbrosset\">Patrick Brosset</a>.</p>\n<p>The result can be seen in the Pen below:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"rLvdyQ\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>To reproduce this with SVG, we create a gradient where <code>y1</code> is <code>100%</code>, <code>y2</code> is <code>0%</code> and <code>x1</code> and <code>x2</code> have the same value (we take it 0 for simplicity). This means the gradient line goes up vertically from the bottom to the top. We also set both stop offsets at <code>50%</code>.</p>\n<pre rel=\"Jade\"><code>linearGradient#g(y1='100%' x2='0%' y2='0%'\n                 gradientTransform='rotate(0 .5 .5)')\n  stop(offset='50%' stop-color='#e18728')\n  stop(offset='50%' stop-color='#d14730')</code></pre>\n<p>Editor's note: I asked Ana why the switch to Jade here, and she says: I used Haml initially because I could avoid introducing a loop variable that I wasn't using anywhere anyway. Later used Jade because it allows variables and computations.</p>\n<p>This gradient is not yet rotated, so the value for its <code>gradientTransform</code> attribute is <code>rotate(0 .5 .5)</code> at this point. The second two values specify the coordinates of the point the gradient is rotated around, relative to the element that the gradient is applied on. <code>0 0</code> means the top left corner, <code>1 1</code> the bottom right corner and <code>.5 .5</code> is exactly in the middle. This can be seen live in the following Pen:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"YWLaxG\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>If we want our gradient to go from left to right, then, in the case of the CSS gradient, we change the angle from <code>0deg</code> to <code>90deg</code>:</p>\n<pre rel=\"CSS\"><code>background-image: \n  linear-gradient(90deg, #e18728 50%, #d14730 0);</code></pre>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"pbVLXm\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>To get the same result with the SVG gradient, we change the value of the <code>gradientTransform</code> to <code>rotate(90 .5 .5)</code>:</p>\n<pre rel=\"Jade\"><code>linearGradient#g(y1='100%' x2='0%' y2='0%'\n                 gradientTransform='rotate(90 .5 .5)')\n  // same stops as before</code></pre>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"QEAmZY\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>So far, so good. It doesn't seem that much of a pain to replicate a CSS gradient with SVG. But let's try other angles as well. In the interactive demo below, we have a CSS gradient on the left and the SVG version on the right. The purple line is the gradient line and it should be perpendicular onto the sharp separation line between the gold and the crimson. Dragging the slider changes the gradient angle for both the CSS and the SVG case. And we can see that something's wrong for values that are not multiples of <code>90deg</code>.</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"pbVdPx\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>As the demo above shows, for values  are not multiples of <code>90deg</code>, we don't get the same result. We would get the same result if the elements we set the gradients on were square. This means that we can set the gradient on a larger square element, which we then clip to our actual element. But having to do all this makes the method of creating fading reflections with <code>element()</code> and <code>mask</code> more complicated.</p>\n<h4>Edge: going all SVG?</h4>\n<p>Sadly, neither of the methods presented above works in Edge. So our only solution that would also work in Edge and wouldn't involve manually duplicating each and every bar would be to just drop everything we have so far and recreate the loader with SVG. This has the advantage of being a crossbrowser method.</p>\n<p>Basically, what we do is we create an SVG element with a <code>viewBox</code> such that its <code>0 0</code> point is dead in the middle. We define a bar that has its bottom edge on the <code>x</code> axis and its left edge on the <code>y</code> axis. We then clone (via the SVG <code>use</code> element) this bar as many times as necessary inside a <code>#loader</code> group. We handle the positioning of these clones the same way we did before.</p>\n<pre rel=\"Jade\"><code>- var bar_w = 125, bar_h = 5 * bar_w;\n- var n = 10;\n- var vb_w = n * bar_w;\n- var vb_h = 2 * bar_h;\n- var vb_x = -.5 * vb_w, vb_y = -.5 * vb_h;\n\nsvg(viewBox=[vb_x, vb_y, vb_w, vb_h].join(' '))\n  defs\n    rect#bar(y=-bar_h width=bar_w height=bar_h)\n\n  g#loader\n    - for(var i = 0; i < n; i++) {\n      - var x = (i - .5 * n) * bar_w;\n      use(xlink:href='#bar' x=x)\n    - }</code></pre>\n<p>The result of the above code can be seen in the following Pen:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"661886afcd183c0acae6370c30cf6d7b\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>Now that we have created these bars, we want to position the <code>svg</code> element nicely and we do that using flexbox. We also want to shade the bars the same way we did before. We do all this from the SCSS:</p>\n<pre rel=\"SCSS\"><code>$n: 10;\n$c: #63a6c1 #1e3f57;\n$bar-w: 1.25em;\n$bar-h: 5 * $bar-w;\n$loader-w: $n * $bar-w;\n$loader-h: 2 * $bar-h;\n\nbody {\n  display: flex;\n  justify-content: center;\n  margin: 0;\n  height: 100vh;\n}\n\nsvg {\n  align-self: center;\n  width: $loader-w; height: $loader-h;\n}\n\n@for $i from 0 to $n {\n  $args: append($c, $i * 100%/($n - 1));\n\n  [id='loader'] use:nth-child(#{$i + 1}) {\n    fill: mix($args...);\n  }\n}</code></pre>\n<p>This Pen shows the result of adding the above code:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"e28a7b9ca1c1919df389afb313073db2\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>We clone our <code>#loader</code> group (again, with a <code>use</code> element). We reflect this clone with a <code>scale(1 -1)</code> function and we apply a mask on it, the same way we did this earlier for the pseudo-element. By default, <a href=\"https://css-tricks.com/transforms-on-svg-elements/#article-header-id-3\">SVG elements are scaled with respect to the <code>0, 0</code> point of the SVG canvas</a>, which in this case is located on the bottom edge of our loader which is perfect for reflecting the loader clone down, we don't need to set a <code>transform-origin</code>.</p>\n<pre rel=\"Jade / SVG\"><code>use(xlink:href='#loader' transform='scale(1 -1)')</code></pre>\n<p>We're using the <code>transform</code> attribute instead of a CSS transform as CSS transforms aren't supported in Edge - if you want them, please <a href=\"https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6820655-add-css-transforms-on-svg-elements\">vote for support</a>!</p>\n<p>We now have a reflection, as it can be seen in the following Pen:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"ca7191a0180cbf97badebc73c7a1b2c0\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>The last step is to fade our reflection with a <code>mask</code>. It's exactly the same method and the same code as before so we're not going to go through it again. The full code is in the final Pen for this method, which you can check out below:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"af56f2b5c1eda24bbe14cf1805545648\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><h3>Animation</h3>\n<p>The CSS animation in the original pen is a pretty straightforward one, rotating the bars in 3D:</p>\n<pre rel=\"CSS\"><code>@keyframes bar {\n  0% {\n  transform: rotate(-.5turn) rotateX(-1turn);\n  }\n  75%, 100% { transform: none; }\n}</code></pre>\n<p>It's the same animation for all the bars:</p>\n<pre rel=\"CSS\"><code>animation: bar 3s cubic-bezier(.81, .04, .4, .7) infinite;</code></pre>\n<p>We only add a different delay for each within the bar loop:</p>\n<pre rel=\"SCSS\"><code>animation-delay: $i*50ms;</code></pre>\n<p>And since we're rotating the bars in 3D, we also add a <code>perspective</code> on the loader element.</p>\n<p>But this only works as intended in WebKit browsers using the <code>-webkit-box-reflect</code> method.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_3.1.gif\" alt=\"\"><br><figcaption>recording of the final result using <code>-webkit-box-reflect</code> in Chrome</figcaption></figure><p>We've also added an image background just to show how that would look. The finished demo in this WebKit-only case is:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"1e1bf93b508f407b22975393affbaab0\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>We can try to get it to work in Firefox as well. However, if we add the animation code to the version that also works in Firefox, things don't look quite right:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_3.2.1.gif\" alt=\"\"><br><figcaption>recording of the initial animated version using <code>element()</code> and <code>mask</code> in Firefox</figcaption></figure><p>We have a few problems here, as it can be tested live in Firefox:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"190f49e8ba99f4b38b2325ff85d3e300\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>The first issue is that the reflection gets cut off beyond the boundaries of the pseudo. We can fix this by increasing the loader element dimensions (and therefore, those of the pseudo as well):</p>\n<pre rel=\"SCSS\"><code>$loader-w: ($n + 1) * $bar-w + $bar-h;</code></pre>\n<p>But there is nothing we can do about the other two problems - the reflection not being updated smoothly as the bars are rotating in 3D and the presence of the <code>perspective</code> property causing the bars to disappear (see bug <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1282312\">1282312</a>).</p>\n<div>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_3.2.2a.gif\" alt=\"\"><br><figcaption>recording of the animated version using element() and mask in Firefox (with perspective)</figcaption></figure><figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2016/07/art_refl_3.2.2b.gif\" alt=\"\"><br><figcaption>recording of the animated version using element() and mask in Firefox (no perspective)</figcaption></figure></div>\n<p>Live test for Firefox (you can toggle the <code>perspective</code> on and off to see the difference):</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"5d7f08fbb89b2551c77402c8e28d9a40\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>What about the all SVG solution? Well, unfortunately, in the above set of keyframes we're animating CSS 3D transforms. CSS transforms are not yet supported in Edge for SVG elements, which is why we have relied on the <code>transform</code> attribute to create the reflection earlier. But the values of the <code>transform</code> attribute are strictly 2D and we cannot animate them without JavaScript anyway (some might think SMIL, but that's markup vomit, it has never been supported in Edge/ IE and now it has been deprecated in Chrome).</p>\n<p>So there is currently absolutely no way to recreate this kind of bar loader demo in a manner that both works across all browsers and doesn't duplicate each and every bar. All we can do is have two loader elements, each with the same number of bars:</p>\n<pre rel=\"Haml\"><code>- 2.times do\n  .loader\n    - 10.times do \n      .bar</code></pre>\n<p>The bars are styled the same way as before and we reflect the second loader element down with a <code>scale(-1)</code> transform:</p>\n<pre rel=\"CSS\"><code>.loader:nth-child(2) {\n  transform: scaleY(-1);\n}</code></pre>\n<p>We add the bar animation and we get the following result:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"6818cecfb6effe8157233aac8c384a9b\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><p>Now we need to fade the reflection. Sadly, we cannot apply a <code>mask</code> on the second loader element as masking is cross-browser only in the case of SVG elements. Edge doesn't yet support masking of HTML elements, but you can <a href=\"https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6261341-css-masking\">vote for it to be implemented</a>.</p>\n<p>The only thing we can do is use a gradient cover for the second loader (the reflected one). Note that this also means we cannot have an image background. A solid background or, in very limited cases, a gradient background will have to do. We create this cover from the <code>::after</code> pseudo-element of the second loader and we make it big enough to cover the bars even as they get rotated.</p>\n<pre rel=\"SCSS\"><code>$bgc: #eee;\n$cover-h: $bar-w + $bar-h;\n$cover-w: $n * $bar-w + $cover-h;\n\nhtml { background: $bgc; }\n\n.loader:nth-child(2)::after {\n  margin-left: -.5 * $cover-w;\n  width: $cover-w; height: $cover-h;\n  background: linear-gradient($bgc $bar-w, rgba($bgc, .3));\n  content: '';\n}</code></pre>\n<p>The result can be seen in the following Pen:</p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"cafe2b99204ca039466c2906de72380d\" data-default-tab=\"result\" data-embed-version=\"2\">\n</p><h3>Final thoughts</h3>\n<p>We need a better cross-browser solution for this. I believe that reflecting an element shouldn't involve duplicating all its descendants like we needed to do for this bar loader. That we shouldn't need to switch to an SVG solution (which also comes with its own problems) just so that we can make the reflection fade and have an image <code>background</code> behind.</p>\n<p>Which is the better solution? <code>-webkit-box-reflect</code> or <code>element()</code> + <code>mask</code>? I don't know. I'd personally like to have them both available cross-browser.</p>\n<p>I used to be certain I didn't want an extra element for the reflection, though <a href=\"https://hacks.mozilla.org/2010/08/mozelement/#comment-4791\">a <code>:reflection</code> pseudo-element</a> sounded reasonable. But now there's something I'd like better than not having an extra element. It's the freedom to create multiple reflections in different directions and transform these reflections in various ways, like rotating them in 3D or skewing them. Using the <code>element()</code> method allows for all this stuff, which is why I like it. Not to mention that using SVG for masking means we can apply more complex masks to these reflections and get cooler effects.</p>\n<p>On the other hand, with great power comes great responsibility. Maybe you can't afford to take the time to get familiar with all the intricacies behind the more powerful method. Sometimes you just want a simple method to get a simple result.</p>\n<hr><p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/state-css-reflections/\">The State of CSS Reflections</a> is a post from <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a></small></p>"
      }
  ]
}
